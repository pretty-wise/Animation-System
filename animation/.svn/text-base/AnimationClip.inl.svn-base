//---------------------------------------------------------------------------------------
namespace Engine{
//---------------------------------------------------------------------------------------

inline
StringId AnimationClip::getName() const
{
	return m_animationName;
}

//---------------------------------------------------------------------------------------

inline StringId AnimationClip::getSkeletonName() const
{
	return m_skeletonId;
}

//---------------------------------------------------------------------------------------

inline
float AnimationClip::getDuration() const
{
	//return m_frameCount / m_framesPerSecond * 1000.f;
	return m_frameCount / m_framesPerMs;
}

//---------------------------------------------------------------------------------------

inline
float AnimationClip::getSampleTime(float localTimeMs) const
{
	float sample = localTimeMs * m_framesPerMs;
	return sample;
}

//---------------------------------------------------------------------------------------

inline
void AnimationClip::getJointPose(float localTimeMs, s16 jointIdx, JointPose& outPose) const
{
	ENGINE_ASSERT(hasJointPose(jointIdx), "");

	s16 realJointIdx = m_aJointRemap[jointIdx];

	float sampleTime = getSampleTime(localTimeMs);
	
	// blended samples.
	int lowerSample = (int)Math::floor<float>(sampleTime);
	int upperSample = (int)Math::ceil<float>(sampleTime);

	if(lowerSample == m_frameCount)
	{
		float duration = getDuration();
		u32 a = 3;
		// nie moze byc tego hacka bo potem sampleTime jest np. 40, lower sample jest 0 i factor = 40 - 0 a factor musi byc <0,1>
		//lowerSample = 0; // ?? to jakis nasty hack. sprawdzic jak to jest we freshu.
	}

	// out of range. for looped clip - blend last frame with the first one.
	if(upperSample == m_frameCount)
	{
		upperSample = 0; //TODO dla loopowanej = 0. dla nieloopowanej powinno byc = lowerSample
	}

	// blend factor.
	float factor = sampleTime - (float)lowerSample;


	// sample blending.
	outPose.translation = Vec3::LERP(m_aAnimationSamples[lowerSample].getJointPose(realJointIdx).translation, m_aAnimationSamples[upperSample].getJointPose(realJointIdx).translation, factor);
	outPose.rotation = Quaternion::SLERP(m_aAnimationSamples[lowerSample].getJointPose(realJointIdx).rotation, m_aAnimationSamples[upperSample].getJointPose(realJointIdx).rotation, factor);
	outPose.scale = Math::lerp(m_aAnimationSamples[lowerSample].getJointPose(realJointIdx).scale, m_aAnimationSamples[upperSample].getJointPose(realJointIdx).scale, factor);
}

//---------------------------------------------------------------------------------------
} // namespace Engine
//---------------------------------------------------------------------------------------
